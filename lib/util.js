// Generated by CoffeeScript 2.0.0-beta2
(function() {
  var NODE_TYPE, TAB_STR, output;

  NODE_TYPE = require("./type");

  TAB_STR = ' '.repeat(4);

  exports.output = output = function(node, depth = 0) {
    var TAB, child, children, i, name, parent, related_field_name, results, token, type, value;
    TAB = (function() {
      results = [];
      for (var i = 0; 0 <= depth ? i < depth : i > depth; 0 <= depth ? i++ : i--){ results.push(i); }
      return results;
    }).apply(this).map(() => {
      return TAB_STR;
    }).join('|');
    ({name, type, value, parent, children, related_field_name, token} = node);
    switch (type) {
      case NODE_TYPE.FIELD:
        return `${TAB}| -> TYPE = FIELD\n${TAB}| -> NAME = ${name}\n${TAB}| -> VALUE = ${value}\n${TAB}| -> FIELD_NAME = ${related_field_name}\n${TAB}| -> CHILDREN =\n${((function() {
          var j, len, results1;
          results1 = [];
          for (j = 0, len = children.length; j < len; j++) {
            child = children[j];
            results1.push(output(child, depth + 1));
          }
          return results1;
        })()).join('\n')}`;
      case NODE_TYPE.UNARY_RELATION_OPERATOR:
      case NODE_TYPE.BINARY_RELATION_OPERATOR:
        return `${TAB}| -> TYPE = RELATION_OPERATOR\n${TAB}| -> NAME = ${name}\n${TAB}| -> VALUE = ${value}\n${TAB}| -> FIELD_NAME = ${related_field_name}\n${((function() {
          var j, len, results1;
          results1 = [];
          for (j = 0, len = children.length; j < len; j++) {
            child = children[j];
            results1.push(output(child, depth + 1));
          }
          return results1;
        })()).join('\n')}`;
      case NODE_TYPE.UNARY_LOGICAL_OPERATOR:
      case NODE_TYPE.BINARY_LOGICAL_OPERATOR:
        return `${TAB}| -> TYPE = LOGICAL_OPERATOR\n${TAB}| -> NAME = ${name}\n${TAB}| -> VALUE = ${value}\n${TAB}| -> FIELD_NAME = ${related_field_name}\n${TAB}| -> CHILDREN =\n${((function() {
          var j, len, results1;
          results1 = [];
          for (j = 0, len = children.length; j < len; j++) {
            child = children[j];
            results1.push(output(child, depth + 1));
          }
          return results1;
        })()).join('\n')}`;
      case NODE_TYPE.LEAF:
        return `${TAB}| -> TYPE = LEAF\n${TAB}| -> NAME = ${name}\n${TAB}| -> VALUE = ${value}\n${TAB}| -> FIELD_NAME = ${related_field_name}`;
    }
  };

}).call(this);
